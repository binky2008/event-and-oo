package demo.command.base;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import demo.infrastructure.PersistentObject;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : EventBusvent&oo
//  @ File Name : EventBus.java
//  @ Date : 2013/9/27
//  @ Author : bner
//
//

public class EventBus {

	public static Map<Class<? extends Event>, List<Handler>> handlers = new HashMap<Class<? extends Event>, List<Handler>>();

	public static Map<Handler, List<Class<? extends Event>>> events = new HashMap<Handler, List<Class<? extends Event>>>();

	private static EventRepository repo = new EventRepository();

	public static void send(Event event) {

		if (event.isPersistent()) {
			repo.save(event);
		}

		if (!handlers.containsKey(event.getClass())) {
			return;
		}
		for (Handler handler : handlers.get(event.getClass())) {
			handler.handle(event);
		}
	}

	public static void registHandler(Class<? extends Event> eventClass,
			Handler handler) {

		if (!handlers.containsKey(eventClass)) {
			handlers.put(eventClass, new ArrayList<Handler>());
		}
		handlers.get(eventClass).add(handler);

		if (!events.containsKey(handler)) {
			events.put(handler, new ArrayList<Class<? extends Event>>());
		}
		events.get(handler).add(eventClass);

		if (handler instanceof PersistentObject) {
			EventType.setPersistent(eventClass.getName(), true);
		} else if (EventType.isPersistent(eventClass.getName()) == null) {
			EventType.setPersistent(eventClass.getName(), false);
		}
	}

	public static void cancelHandler(Handler handler) {
		Iterator<Class<? extends Event>> it = handlers.keySet().iterator();
		Class<? extends Event> eventClass;
		while (it.hasNext()) {
			eventClass = it.next();
			handlers.get(eventClass).remove(handler);
			if (handlers.get(eventClass).size() == 0) {
				it.remove();
			}
		}
		events.remove(handler);
	}

	public static List<Class<? extends Event>> getEventClasses(Handler handler) {
		return events.get(handler);
	}

	public static void destory() throws Exception {
		List<Handler> hs = new ArrayList<Handler>();
		for (Handler handler : events.keySet()) {
			hs.add(handler);
		}
		for (Handler handler : hs) {
			handler.destory();
		}
		repo.destory();
	}

	public static List<Event> getStayEvents(Date startDate, Handler handler) {
		return repo.getEvents(startDate, events.get(handler));
	}
}
