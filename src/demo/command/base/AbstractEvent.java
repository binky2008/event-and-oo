package demo.command.base;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;
import java.util.UUID;

import demo.infrastructure.DateUtil;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : AbstractEventvent&oo
//  @ File Name : AbstractEvent.java
//  @ Date : 2013/9/27
//  @ Author : bner
//
//

public abstract class AbstractEvent implements Event {

	private String id;

	private transient Event source;

	private transient EventTeam eventTeam;

	private Date createTime;

	private String eventTeamId;

	private String sourceId;

	private transient MongoDBTemplate mongoDBTemplate = new MongoDBTemplate();

	public AbstractEvent() {
		super();

		this.id = UUID.randomUUID().toString();

		this.createTime = DateUtil.getSysDate();
	}

	public AbstractEvent(Event source) {
		super();
		this.source = source;
	}

	@Override
	public boolean isNeedFilter() {
		return false;
	}

	public Event getSource() {
		return source;
	}

	public void setSource(Event source) {
		this.source = source;
	}

	public EventTeam getEventTeam() {
		return eventTeam;
	}

	public void setEventTeam(EventTeam eventTeam) {
		this.eventTeam = eventTeam;
	}

	@Override
	public <T extends Event> T getTheSource(Class<T> type) {
		if (this.source != null) {
			if (this.source.getClass().equals(type)) {
				return (T) this.source;
			} else {
				return this.source.getTheSource(type);
			}
		} else {
			return null;
		}
	}

	@Override
	public String getId() {
		return this.id;
	}

	public Date getCreateTime() {
		return this.createTime;
	}

	@Override
	public Integer calOrder() {
		return null;
	}

	@Override
	public boolean isPersistent() {
		return EventType.isPersistent(this.getClass().getName());
	}

	@Override
	public void save() {
		if (this.getSource() == null) {
			this.eventTeam.save();
		} else {
			this.sourceId = this.source.getId();
			this.getSource().save();
		}

		this.eventTeamId = eventTeam.getId();
		this.mongoDBTemplate.save(EventRepository.Event, this);

	}

	@Override
	public void load(Map<String, EventTeam> eventTeams,
			Map<String, Event> events) {
		this.eventTeam = eventTeams.get(this.eventTeamId);
		this.eventTeam.addEvent(this);
		this.loadSource(events);

	}

	@Override
	public void loadSource(Map<String, Event> events) {
		if (this.sourceId != null) {
			this.source = events.get(this.sourceId);
			this.source.loadSource(events);
		}
	}

	@Override
	public String getTypeInfo() {
		StringBuilder info = new StringBuilder();
		info.append(this.getClass().getSimpleName());
		Event event = this;
		while (event.getSource() != null) {
			event = event.getSource();
			info.append("(" + event.getClass().getSimpleName() + ")");
		}
		return info.toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		AbstractEvent other = (AbstractEvent) obj;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	@Override
	public int compareTo(Event o) {
		int compare = this.eventTeam.compareTo(o.getEventTeam());
		if (compare != 0) {
			return compare;
		} else {
			return this.calOrder().compareTo(o.calOrder());
		}
	}

	@Override
	public String toString() {
		return "eventId : "
				+ id
				+ " teamId : "
				+ this.eventTeam.getId()
				+ " order : "
				+ this.calOrder()
				+ " type : "
				+ this.getTypeInfo()
				+ " createTime : "
				+ new SimpleDateFormat("yyyy-MM-dd HH:mm:ss SSS")
						.format(createTime);
	}

}
