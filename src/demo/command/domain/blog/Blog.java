package demo.command.domain.blog;

import java.util.ArrayList;
import java.util.List;

import demo.command.base.StateHandler;
import demo.command.base.Event;
import demo.command.base.EventBus;
import demo.command.base.EventFactory;
import demo.command.domain.tag.Tag;
import demo.command.domain.topic.Topic;
import demo.infrastructure.DateUtil;
import demo.infrastructure.LogUtil;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Blogvent&oo
//  @ File Name : Blog.java
//  @ Date : 2013/9/27
//  @ Author : bner
//
//

public class Blog extends StateHandler<Event> {

	private String id;

	private String creatorId;

	private String topicId;

	private int likeCount = 0;

	private List<String> tags = new ArrayList<String>();

	private transient BlogRepository repo = new BlogRepository();

	public Blog(String id) {
		this.id = id;

		EventBus.registHandler(BlogPublishFinishedEvent.class, this);
		EventBus.registHandler(BlogLikedEvent.class, this);
		EventBus.registHandler(BlogTagAddedEvent.class, this);
	}

	public Blog(String id, String creatorId, Topic topic, String content) {
		this.id = id;

		this.creatorId = creatorId;

		this.addToTopic(topic);

		EventBus.registHandler(BlogPublishFinishedEvent.class, this);
		EventBus.registHandler(BlogLikedEvent.class, this);
		EventBus.registHandler(BlogTagAddedEvent.class, this);

		BlogPublishedEvent blogPublishedEvent = EventFactory.createEvent(
				BlogPublishedEvent.class, this);

		blogPublishedEvent.setBlog(this.getBlogVO());
		blogPublishedEvent.setContent(content);
		blogPublishedEvent.setOperId(creatorId);

		EventBus.send(blogPublishedEvent);
	}

	public void addTags(List<Tag> tagObjs) {

		List<String> tags = new ArrayList<String>();
		for (Tag tag : tagObjs) {
			if (!this.tags.contains(tag.getId())) {
				this.tags.add(tag.getId());
				tags.add(tag.getId());
				tag.addRefObject(id, "Blog");
			}
		}
		BlogTagAddedEvent event = EventFactory.createEvent(
				BlogTagAddedEvent.class, this);
		event.setBlog(this.getBlogVO());
		event.setOperId(this.creatorId);

		EventBus.send(event);
	}

	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getCreatorId() {
		return creatorId;
	}

	public void setCreatorId(String creatorId) {
		this.creatorId = creatorId;
	}

	public void addToTopic(Topic topic) {
		this.topicId = topic.getId();
		topic.addBlog(this);
	}

	public String getTopicId() {
		return topicId;
	}

	public void setTopicId(String topicId) {
		this.topicId = topicId;
	}

	public int getLikeCount() {
		return likeCount;
	}

	public void setLikeCount(int likeCount) {
		this.likeCount = likeCount;
	}

	public List<String> getTags() {
		return tags;
	}

	public void setTags(List<String> tags) {
		this.tags = tags;
	}

	public BlogVO getBlogVO() {

		BlogVO blogVO = new BlogVO();

		blogVO.setId(id);
		blogVO.setCreatorId(creatorId);
		blogVO.setTopicId(topicId);
		blogVO.setLikeCount(likeCount);
		blogVO.setTags(tags);

		return blogVO;
	}

	public BlogRepoVO getBlogRepoVO() {

		BlogRepoVO blogVO = new BlogRepoVO();

		blogVO.setId(id);
		blogVO.setCreatorId(creatorId);
		blogVO.setTopicId(topicId);
		blogVO.setLikeCount(likeCount);
		blogVO.setTags(tags);
		blogVO.setLastSaveDate(DateUtil.getSysDate());

		return blogVO;
	}

	public void liked(String userId) {
		this.likeCount++;

		BlogLikedEvent event = EventFactory.createEvent(BlogLikedEvent.class,
				this);
		event.setBlog(this.getBlogVO());
		event.setOperId(userId);

		EventBus.send(event);
	}

	@Override
	public void handle(Event event) {

		if (event instanceof BlogOperationEvent) {
			BlogOperationEvent blogOperationEvent = (BlogOperationEvent) event;
			if (blogOperationEvent.getBlogId().equals(this.id)) {
				if (event instanceof BlogLikedEvent) {
					LogUtil.print("Blog " + this.id + " liked "
							+ ((BlogLikedEvent) event).getOperId());
				} else if (event instanceof BlogPublishFinishedEvent) {
					LogUtil.print("Blog " + this.id + " Publish Finished.");
				} else if (event instanceof BlogTagAddedEvent) {
					LogUtil.print("Blog " + this.id + " add Tags, Tags="
							+ ((BlogTagAddedEvent) event).getTagInfos());
				}

				BlogStateUpdatedEvent blogStateUpdatedEvent = EventFactory
						.createEvent(BlogStateUpdatedEvent.class, event, this);

				blogStateUpdatedEvent.setTags(tags);

				EventBus.send(blogStateUpdatedEvent);
			}
		}
	}

	@Override
	public void load() {
		BlogRepoVO blogVO = repo.find(this.id);

		this.setCreatorId(blogVO.getCreatorId());
		this.setLikeCount(blogVO.getLikeCount());
		this.setTopicId(blogVO.getTopicId());
		this.setTags(blogVO.getTags());
		this.setLastSaveDate(blogVO.getLastSaveDate());

	}

	@Override
	public void save() throws Exception {
		repo.save(this.getBlogRepoVO());
	}

	@Override
	public String toString() {
		StringBuilder info = new StringBuilder();
		info.append("\nBlog : ");
		info.append(id);
		info.append("\n");

		info.append("creatorId : ");
		info.append(creatorId);
		info.append("\n");

		info.append("topicId : ");
		info.append(topicId);
		info.append("\n");

		info.append("likeCount : ");
		info.append(likeCount);
		info.append("\n");

		info.append("Tags : ");
		for (String tag : tags) {
			info.append(tag);
			info.append(",");
		}
		info.append("\n");

		return info.toString();
	}
}
